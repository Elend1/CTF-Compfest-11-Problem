
global _start

section .data
	my_str 			times 0x100 db 0x0
	not_flag		db 0x5b, 0x43, 0x6d, 0x67, 0x1c, 0x38, 0x10, 0x33, 0x14, 0x52, 0x33, 0x7a, 0x27, 0x1b, 0x3d, 0x3d, 0x40, 0x6a, 0xf, 0x1, 0x68, 0x60, 0xc, 0x6e, 0x5c, 0x19, 0x58, 0x3d, 0x46
					db 0x5c, 0x79, 0x67, 0x6f, 0x5e, 0x51, 0x49, 0x65, 0x6b, 0x7d, 0x18, 0x6b, 0x7c, 0x78, 0x58, 0x74, 0x4b, 0x27, 0x27, 0x50, 0x1d, 0x58, 0x2e, 0x6f, 0x45, 0x10, 0x7, 0x3a, 0x5a
					db 0x1c, 0x7d, 0x20, 0x53, 0x64, 0x4b, 0x31, 0x20, 0x46, 0x74, 0x38, 0x5a, 0x9, 0xd, 0x59, 0x38, 0x11, 0x24, 0x18, 0x46, 0x15, 0x1b, 0x44, 0x66, 0x5a, 0x15, 0x1e, 0x66, 0x39
					db 0x5c, 0x6d, 0x1a, 0xc, 0x29, 0x5c, 0x4b, 0x31, 0x71, 0x10, 0x5b, 0x1, 0x7b, 0x16, 0x61, 0x6, 0x9, 0xb, 0x1b, 0x7e, 0x42, 0x2b, 0x10, 0x1e, 0x55, 0x5e, 0x62, 0x2, 0x74
					db 0x2a, 0xb, 0x15, 0x75, 0x79, 0x1c, 0x59, 0x5d, 0x18, 0x79, 0x40, 0x5, 0x2e, 0x29, 0x1b, 0x3, 0x3c, 0x2, 0x23, 0x41, 0x2f, 0x2e, 0x6, 0x9, 0x77, 0x65, 0x3e, 0x2c, 0x6e
					db 0x6d, 0x43, 0x7, 0x9, 0x76, 0x4, 0x2d, 0x53, 0x43, 0x35, 0x6f, 0x54, 0x10, 0x1c, 0x62, 0x0, 0x3e, 0x12, 0x2d, 0x68, 0x5e, 0x5, 0x57, 0x49, 0x59, 0x57, 0x40, 0x62, 0x10
					db 0x62, 0x14, 0x78, 0x59, 0x61, 0x62, 0x6e, 0x2, 0x7c, 0x30, 0x4c, 0x4c, 0x49, 0x18, 0x4, 0x1b, 0x51, 0x4b, 0x1c, 0x4e, 0x19, 0x4e, 0x2e, 0x2d, 0x42, 0x3, 0x10, 0x46, 0x33
					db 0x46, 0x4c, 0x7, 0x41, 0x6, 0x38, 0x6a, 0x13, 0x46, 0x71, 0x12, 0x18, 0x26, 0x3f, 0x42, 0x5d, 0x47, 0x39, 0x11, 0x11, 0x58, 0x3a, 0x7d, 0x22, 0x35, 0x5e, 0x45, 0x34, 0x48
					db 0x59, 0x37, 0x68, 0x7a, 0x49, 0x78, 0x28, 0x39, 0x52, 0x48, 0x56, 0xb, 0x1c, 0x4c, 0x75, 0x7a, 0x17, 0x17, 0xb, 0x47, 0x3d, 0x6f, 0x3c, 0x3a, 0x20, 0x31, 0x51, 0x43, 0x18
					db 0x64, 0x20, 0x27, 0x6e, 0x7a, 0x11, 0x4c, 0x18, 0x69, 0x67, 0x4f, 0x6c, 0x31, 0x2b, 0x23, 0x39, 0x71, 0x49, 0x75, 0x66, 0x6c, 0x51, 0x3a, 0x62, 0x3c, 0x5a, 0x68, 0x14, 0x42
					db 0x72, 0x27, 0xe, 0x24, 0x71, 0x4b, 0x72, 0x25, 0x20, 0xa, 0x5a, 0x34, 0x37, 0x70, 0x48, 0x2b, 0x30, 0x8, 0x74, 0x60, 0x65, 0x47, 0x65, 0x5, 0x51, 0x74, 0x65, 0x2f, 0x43
					db 0x6e, 0x4, 0x76, 0x1f, 0x5c, 0x26, 0x43, 0xf, 0x6e, 0x53, 0x29, 0x40, 0x66, 0x35, 0x23, 0x4, 0x42, 0x5, 0x1b, 0x23, 0x65, 0x55, 0x9, 0x1a, 0x0, 0x31, 0x6a, 0x15, 0x22
					db 0x18, 0x78, 0x65, 0x64, 0x49, 0x3e, 0x53, 0x4f, 0x47, 0x49, 0xf, 0x18, 0x55, 0x2c, 0x21, 0x49, 0x1, 0x17, 0x2f, 0x6e, 0x63, 0x7b, 0x5b, 0x3b, 0x32, 0x2, 0x6a, 0x13, 0x66
					db 0x26, 0x3b, 0x18, 0x24, 0x39, 0x2c, 0x3f, 0x66, 0x74, 0x63, 0x26, 0x1a, 0x10, 0x8, 0x43, 0x71, 0x38, 0x6d, 0x29, 0x1e, 0x2d, 0x41, 0x56, 0x38, 0x40, 0x4a, 0x37, 0x5f, 0x57
					db 0x29, 0x49, 0x41, 0x74, 0x4a, 0x1b, 0x9, 0x69, 0x59, 0x3a, 0x2, 0x1b, 0x9, 0x6b, 0x71, 0x4c, 0x55, 0x3c, 0x5b, 0x6a, 0x7b, 0x32, 0x74, 0x52, 0xe, 0x33, 0xf, 0x18, 0x7e
					db 0x5a, 0x4d, 0x20, 0x55, 0x4a, 0x34, 0xe, 0x7a, 0x66, 0x42, 0x3b, 0x5e, 0x68, 0x5f, 0x4a, 0x28, 0x16, 0x38, 0x4, 0x55, 0x54, 0x1a, 0x5, 0x1b, 0x52, 0x2, 0x40, 0x79, 0x56
					db 0x6d, 0x23, 0x7, 0x73, 0x1, 0x67, 0x58, 0x51, 0xf, 0x54, 0x23, 0x2d, 0x11, 0x48, 0x15, 0x4e, 0x55, 0x3f, 0x3c, 0x24, 0x28, 0x10, 0x2a, 0x4e, 0x26, 0x38, 0x2f, 0xc, 0x4e
					db 0x74, 0x5b, 0x6c, 0x2a, 0x61, 0x6, 0xc, 0x12, 0x42, 0x23, 0x4, 0x63, 0x38, 0x3b, 0x55, 0x1f, 0x67, 0x26, 0x38, 0x4f, 0x1, 0x26, 0x29, 0x2b, 0x4a, 0x1c, 0xe, 0x2f, 0x7b
					db 0x30, 0x26, 0x3d, 0x6b, 0x3, 0x3f, 0x6c, 0x28, 0x7c, 0x62, 0x6c, 0x44, 0x66, 0x2b, 0x54, 0x50, 0xf, 0x6c, 0x38, 0x45, 0x6a, 0x41, 0x41, 0xb, 0x73, 0x78, 0x60, 0x2f, 0x12
					db 0x40, 0x53, 0x15, 0x8, 0x1c, 0x1d, 0x2b, 0x0, 0x5e, 0x30, 0x49, 0x3e, 0x64, 0xb, 0x19, 0x72, 0x1, 0x11, 0x79, 0x29, 0xa, 0x17, 0x2, 0x6, 0x4c, 0x29, 0x58, 0x23, 0x55
					db 0x32, 0x38, 0x7e, 0x65, 0x5, 0x26, 0x37, 0x5b, 0x13, 0x7, 0x16, 0x5, 0xd, 0xa, 0x6d, 0x59, 0x73, 0x71, 0x64, 0x74, 0x48, 0x42, 0x57, 0x48, 0x20, 0x25, 0x73, 0x30, 0x1b
					db 0x22, 0x23, 0xb, 0x70, 0x3e, 0x4c, 0x31, 0x7d, 0x41, 0x36, 0x46, 0x58, 0x7c, 0x2c, 0x4, 0xa, 0x71, 0x3, 0x34, 0x3b, 0x4a, 0x1a, 0x47, 0x10, 0x3a, 0x67, 0x1f, 0x51, 0x6f
					db 0x44, 0x70, 0x73, 0x32, 0x6b, 0x22, 0x13, 0x64, 0x77, 0x72, 0x6, 0x17, 0x66, 0x31, 0x38, 0x2f, 0xe, 0x54, 0x50, 0x61, 0x7e, 0x74, 0x74, 0x25, 0xb, 0x48, 0x7c, 0x5f, 0xc
					db 0x25, 0x3f, 0x75, 0x51, 0x11, 0x19, 0x3f, 0x44, 0x27, 0x25, 0x79, 0x64, 0x6e, 0x68, 0x41, 0x37, 0x50, 0x9, 0x1a, 0x4f, 0x5d, 0x72, 0x71, 0x52, 0x6e, 0x17, 0xc, 0x25, 0x5d
					db 0x26, 0x21, 0xf, 0x6a, 0x3e, 0x2e, 0x3b, 0x4b, 0x1a, 0xb, 0x54, 0x6, 0x38, 0x60, 0x25, 0x55, 0x3c, 0x3, 0x2c, 0x6d, 0x77, 0x5a, 0x3a, 0x73, 0x17, 0x79, 0x2b, 0x4a, 0x54
					db 0x33, 0x69, 0x46, 0x62, 0x77, 0xd, 0x50, 0x73, 0x2c, 0x12, 0x5e, 0x3a, 0x5d, 0x3f, 0x64, 0xf, 0x40, 0x2e, 0x64, 0x59, 0x6e, 0x1d, 0x67, 0x1a, 0x16, 0x1c, 0xb, 0x14, 0x10
					db 0x5f, 0x17, 0x3, 0x28, 0x45, 0x54, 0x23, 0x5, 0x5d, 0x69, 0x79, 0xc, 0x72, 0x5, 0x1e, 0x19, 0x51, 0x4e, 0x5, 0x23, 0x6a, 0xf, 0x35, 0x5b, 0x7b, 0x23, 0x5c, 0x19, 0x2f
					db 0x51, 0x53, 0x7a, 0x75, 0x58, 0x18, 0x5b, 0x3a, 0x2, 0x42, 0x53, 0x15, 0x42, 0x1b, 0x0, 0x1f, 0x21, 0x61, 0x66, 0x25, 0x1, 0x39, 0x63, 0x4d, 0x1, 0x75, 0x51, 0x4a, 0x5f
					db 0x8, 0x4b, 0x12, 0x56, 0x8, 0xf, 0x3e, 0x11, 0x40, 0x68, 0x8, 0x7c, 0x19, 0xe, 0x4f, 0x21, 0x1e, 0x7d, 0x12, 0x3a, 0x4b, 0x5a, 0x51, 0x65, 0x18, 0x7e, 0x1b, 0x7b, 0x66
	yay				db	"Hooray :)", 0xa
	not_yay			db	"Not Hooray :(", 0xa
	very_not_yay	db	"Not the correct length", 0xa
	not_flag_v2		db	0x13, 0x7e, 0x4a, 0x26, 0x5a, 0x5b, 0x28, 0x54, 0x69, 0x68, 0x5d, 0x75, 0x36, 0x7a, 0x4c, 0x69, 0x23, 0x15, 0x4e, 0x41, 0x7d, 0x19, 0x4a, 0x4d, 0x1a, 0x40, 0x5e, 0x61, 0x2c

section .text
	
_start:
	xor eax, eax
	xor ebx, ebx
	xor ecx, ecx
	xor edx, edx
	mov eax, 0x3
	mov ebx, 0x0
	mov ecx, my_str
	mov edx, 0x100
	int 0x80
	
checker:
	mov ebp, esp
	mov DWORD [ebp+4], 0xffffffff
	checker_loop:
		add DWORD [ebp+4], 0x1
		mov eax, DWORD [ebp+4]
		mov eax, [my_str+eax]
		test eax, eax
		jnz checker_loop
	mov eax, DWORD[ebp+4]
	cmp eax, 0x1d
	je multiply
	jmp before_exit

multiply:
	mov DWORD [ebp+4], 0xffffffff
	mov DWORD [ebp+16], 0x7f
	jmp multiply_outer_loop_check

	multiply_outer_loop:
		mov DWORD [ebp+8], 0xffffffff
		mov DWORD [ebp+12], 0x0
		mov ebx, DWORD [ebp+4]
		jmp multiply_inner_loop_check

	multiply_inner_loop:
		xor eax, eax
		mov al, BYTE [ebp+8]
		mov ecx, 0x1d
		imul ecx
		mov ecx, eax
		mov dl, [not_flag + ebx + ecx]
		xor ecx, ecx
		mov ecx, DWORD [ebp+8]
		mov al, [my_str+ecx]
		imul dl
		add DWORD [ebp+12], eax
		mov eax, DWORD [ebp+12]
		cdq
		idiv DWORD[ebp+16]
		mov DWORD [ebp+12], edx

	multiply_inner_loop_check:
		add DWORD [ebp+8], 0x1
		mov eax, DWORD [ebp+8]
		cmp eax, 0x1d
		jl multiply_inner_loop
		
		mov eax, DWORD [ebp+12]
		mov ebx, DWORD [ebp+4]
		mov	DWORD [ebp+20+ebx], eax
	multiply_outer_loop_check:
		add DWORD [ebp+4], 0x1
		mov eax, DWORD [ebp+4]
		cmp eax, 0x1d
		jl multiply_outer_loop
	
	jmp checker_v2

printing_yay:
	mov eax, 0x4
	mov ebx, 1
	mov ecx, yay
	mov edx, 0xa
	int 0x80
	jmp _exit

printing_not_yay:
	mov eax, 0x4
	mov ebx, 1
	mov ecx, not_yay
	mov edx, 0xe
	int 0x80
	jmp _exit

checker_v2:
	mov DWORD [ebp+4], 0xffffffff
	jmp checker_v2_loop_check
	checker_v2_loop:
		mov al, [not_flag_v2+ecx]
		cmp al, BYTE [ebp+20+ecx] 
		jnz printing_not_yay

	checker_v2_loop_check:
		add DWORD [ebp+4], 0x1
		mov ecx, DWORD[ebp+4]
		cmp ecx, 0x1d
		jl checker_v2_loop
	jmp printing_yay

before_exit:
	mov eax, 0x4
	mov ebx, 1
	mov ecx, very_not_yay
	mov edx, 0x17
	int 0x80
	jmp _exit

_exit:
	mov eax, 0x1
	int 0x80